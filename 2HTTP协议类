## HTTP协议类
    1.http协议的主要特点
        1) 简单快速 uri是固定的
        2) 灵活 一个http协议能够完成不同数据类型的传输
        3) 无连接 连接一次就会断掉，不会保持连接
        4) 无状态 两次连接，服务端不能区分身份的不同
    2.请求报文
        请求行 包含http方法、页面地址、http协议以及版本
        请求头 key value值告诉后端要哪些内容
        空行 遇到空行，告诉后端，不再是请求行，而是请求体
        请求体 数据部分

        示例：
        POST /lesson/ajaxmediauser/ HTTP/1.1
        Host: coding.imooc.com （从头host到cookie都是请求头）
        Connection: keep-alive
        Content-Length: 53
        Accept: application/json, text/javascript, */*; q=0.01
        Origin: https://coding.imooc.com
        X-Requested-With: XMLHttpRequest
        User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36
        Content-Type: application/x-www-form-urlencoded; charset=UTF-8
        Referer: https://coding.imooc.com/lesson/129.html
        Accept-Encoding: gzip, deflate, br
        Accept-Language: zh-CN,zh;q=0.9
        Cookie: cvde=5b417d152f6c8-52
    2.响应报文 （与请求报文差不多）
        状态行
        响应头
        空行
        响应体

        示例：
        HTTP/1.1 200 OK
        Server: nginx
        Date: Sun, 08 Jul 2018 05:13:57 GMT
        Content-Type: text/html
        Transfer-Encoding: chunked
        Connection: keep-alive
        Vary: Accept-Encoding
        Set-Cookie: imooc_isnew=2; expires=Mon, 08-Jul-2019 05:13:57 GMT; path=/; domain=.imooc.com
        Content-Encoding: gzip
    3.HTTP方法
        GET 获取资源
        POST 传输资源
        PUT 更新资源
        DELETE 删除资源
        HEAD 获得报文首部
    4.POST和GET的区别
        1) GET在浏览器回退时是无害的，POST会再次提交请求 *
        2) GET请求会被浏览器主动缓存，POST不会，除非主动设置 *
        3) GET产生的URL地址可以被收藏，POST不可以
        4) GET请求只能进行URL编码，POST支持多种编码方式
        5) GET请求参数会被完整保留在浏览器历史记录里，POST参数不会被保留 *
        6) GET在URL中传送的参数有长度限制（2kb）,POST没有限制 *
        7) 对于参数的数据类型，GET只接受ASCII字符，POST没有限制
        8) GET比POST更不安全，因为参数直接暴露在URL上
        9) GET参数通过URL传递，POST放在Request body中 *
    5.HTTP状态码
        1xx: 指示信息-表示请求已接收，继续处理
        2xx: 成功-表示请求已被成功接收
        3xx: 重定向-要完成请求必须进行更近异步的操作
        4xx: 客户端错误-请求有语法错误或请求无法实现
        5xx: 服务器错误-服务器未能实现合法的请求

        进一步
        200 OK 客户端请求成功
        206 Partial Content 客户发送了一个带有Range头的GET请求，服务器完成了它（一般用在音频、视频传输中）
        301 Moved Permanently 所请求的页面已经转移至新的url
        302 Found 所请求的页面已经临时转到至新的url
        304 Not Modified 客户端有缓存的文档并发出了一个条件性的请求，服务器告诉用户，原来缓存的文档还可以继续使用
        400 Bad Request 客户端请求有语法错误，不能被服务器所理解
        401 Unauthorized 请求未经授权，这个状态码必须和WWW-Authenticate报头域一起使用
        403 Forbidden: 对被请求的页面的访问被禁止
        404 Not Found 请求资源不存在
        405 Not allowed 请求方法错误
        500 Internal Server Error 服务器发生不可预期的错误，原来缓存文档还可以继续使用
        503 Server Unavailable 请求未完成，服务器临时过载或当机，一段时间后可能恢复正常
    6.持久连接
        HTTP协议采用“请求-应答”模式，也就是非Keep-Alive模式，每次请求都要建立一个新链接，完成之后立即断开
        当使用Keep-Alive模式时，链接会持续有效，当有后继请求时，避免了重新建立链接（1.1版本才支持，1.0版本不支持）
    7.管线化
        在使用持久连接时，某个连接上的消息的传递类似于
            请求1 > 响应1 > 请求2 > 响应2 > 请求3 > 响应3
        管线化（打包请求，一次性传输过去，一次性传输回来）也是在持久连接的情况下完成
            请求1 > 请求2 > 请求3 >响应1 > 响应2 > 响应3
        管线化的特点：
            1) 通过持久连接完成，仅HTTP/1.1支持此技术 *
            2) 只有GET和HEAD请求可以进行管线化，POST则有所限制 *
            3) 初次创建连接时不应启动管线机制，因为对方（服务器）不一定支持HTTP/1.1 *
            4) 管线化不会影响响应到来的顺序
            5) HTTP/1.1要求服务器端支持管线化，但不要求服务器端也对响应进行管线化处理，只是要求对于管线化的请求不失败即可
            6) 由于上面提到的服务器端问题，开启管线化很可能并不会带来大幅度性能提升，而且很多服务器和代理程序对管线化支持并不好，因此现在浏览器如Chrome和Firefox默认未开启管线化支持
